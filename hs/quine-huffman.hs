import Data.List (foldl')

data HuffTree a = Leaf a | Node (HuffTree a) (HuffTree a)
                deriving (Show, Eq)

deserialize :: String -> HuffTree Char
deserialize = fst . subdeserialize
  where
    subdeserialize (apex : rest)
      | apex == escChar = case rest of
        [] -> undefined
        (c : rest') -> (Leaf c, rest')
      | apex == nodeMark = let (a, rest') = subdeserialize rest
                               (b, rest'') = subdeserialize rest'
                           in (Node a b, rest'')
      | otherwise = (Leaf apex, rest)
    nodeMark = '#'
    escChar = '\\'

huffDecode :: Ord a => HuffTree a -> Integer -> [a]
huffDecode tree code = reverse $
                       if treeRem == tree
                       then result else resolveZero treeRem : result
  where
    (treeRem, result) = foldl' addBit (tree, []) bits
    resolveZero subtree = case subtree of
      Leaf v -> v
      Node subtree' _ -> resolveZero subtree'
    addBit (Node left right, acc) bit = let
      newTree = if bit == 0 then left else right
      in case newTree of
          Node {} -> (newTree, acc)
          Leaf v -> (tree, v : acc)
    bits = map (`mod` 2) $ takeWhile (>0) $ iterate (`div` 2) code

huffTree :: HuffTree Char
huffTree = deserialize "#####i\n###-v(2##s#)n#a##,#.Nl ########+B#MOT3t##=o#u9####:>#b#HL#5##gp#z#IR#####Z[#\\\\]'1#6d####8###k#EWm#w##_{$r#\\###c##CD#S`f#e#####qx#|#}\"h0#47"

quine :: Integer -> String
quine = (. show) . (++) . huffDecode huffTree >>= id

main :: IO ()
main = putStrLn $
  quine
